---
description: 
globs: 
alwaysApply: true
---

    You are an expert developer in TypeScript, Node.js, Next.js, React, Supabase, Tailwind CSS, Radix UI, Shadcn UI, Vercel. 

    Look at [PROJECT_OVERVIEW.md](mdc:own/PROJECT_OVERVIEW.md) & [TASKS.md](mdc:own/TASKS.md) when starting a new chat.
    See [HOW_TO_RUN.md](mdc:own/HOW_TO_RUN.md) for how to run our development & deployment files. 

    Always use port :3000 for local development. 

    When writing new features for API endpoints, try testing with simple curl commands before writing test scripts. 

    Frontend

    Key Principles
    - Write concise, technical responses with accurate TypeScript examples.
    - Use functional, declarative programming. Avoid classes.
    - Prefer iteration and modularization over duplication.
    - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
    - Use lowercase with dashes for directories (e.g., components/auth-wizard).
    - Favor named exports for components.
    - Use the Receive an Object, Return an Object (RORO) pattern.

    JavaScript/TypeScript
    - Use "function" keyword for pure functions. Omit semicolons.
    - Use TypeScript for all code. Prefer interfaces over types.
    - File structure: Exported component, subcomponents, helpers, static content, types.
    - Avoid unnecessary curly braces in conditional statements.
    - For single-line statements in conditionals, omit curly braces.
    - Use concise, one-line syntax for simple conditional statements (e.g., if (condition) doSomething()).

    Error Handling and Validation
    - Prioritize error handling and edge cases:
      - Handle errors and edge cases at the beginning of functions.
      - Use early returns for error conditions to avoid deeply nested if statements.
      - Place the happy path last in the function for improved readability.
      - Avoid unnecessary else statements; use if-return pattern instead.
      - Use guard clauses to handle preconditions and invalid states early.
      - Implement proper error logging and user-friendly error messages.
      - Consider using custom error types or error factories for consistent error handling.


    React/Next.js
    - Use functional components and TypeScript interfaces.
    - Use declarative JSX.
    - Use function, not const, for components.
    - Use Shadcn UI, Radix, and Tailwind CSS for components and styling.
    - Implement responsive design with Tailwind CSS.
    - Use mobile-first approach for responsive design.
    - Place static content and interfaces at file end.
    - Use content variables for static content outside render functions.
    - Minimize 'use client', 'useEffect', and 'setState'. Favor React Server Components (RSC).
    - Use Zod for form validation.
    - Wrap client components in Suspense with fallback.
    - Use dynamic loading for non-critical components.
    - Optimize images: WebP format, size data, lazy loading.
    - Model expected errors as return values: Avoid using try/catch for expected errors in Server Actions.
    - Use error boundaries for unexpected errors: Implement error boundaries using error.tsx and global-error.tsx files.
    - Use useActionState with react-hook-form for form validation.
    - Code in services/ dir always throw user-friendly errors that can be caught and shown to the user.
    - Use next-safe-action for all server actions.
    - Implement type-safe server actions with proper validation.
    - Handle errors gracefully and return appropriate responses.

    Supabase
    - Use the Supabase client for database interactions and real-time subscriptions.
    - Implement Row Level Security (RLS) policies for fine-grained access control.
    - Use Supabase Auth for user authentication and management.

    Naming Conventions
    - Booleans: Use auxiliary verbs such as 'does', 'has', 'is', and 'should' (e.g., isDisabled, hasError).
    - Filenames: Use lowercase with dash separators (e.g., auth-wizard.tsx).
    - File extensions: Use .config.ts, .test.ts, .context.tsx, .type.ts, .hook.ts as appropriate.

    Component Structure
    - Break down components into smaller parts with minimal props.
    - Suggest micro folder structure for components.
    - Use composition to build complex components.
    - Follow the order: component declaration, styled components (if any), TypeScript types.

    Styling
    - Use Tailwind CSS for styling, following the Utility First approach.
    - Utilize the Class Variance Authority (CVA) for managing component variants.

    Accessibility
    - Ensure interfaces are keyboard navigable.
    - Implement proper ARIA labels and roles for components.
    - Ensure color contrast ratios meet WCAG standards for readability.

    Refer to Next.js documentation for Data Fetching, Rendering, and Routing best practices and to the
    Vercel AI SDK documentation and OpenAI/Anthropic API guidelines for best practices in AI integration.

    --

    Backend


    You are an expert in Python, FastAPI, AI Agents, Railway and scalable API development. 
    
    Always use absolute imports (from app.module import thing) instead of relative imports (from .module import thing) for production compatibility

    Key Principles
    - Write concise, technical responses with accurate Python examples.
    - Use functional, declarative programming; avoid classes where possible.
    - Prefer iteration and modularization over code duplication.
    - Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission).
    - Use lowercase with underscores for directories and files (e.g., routers/user_routes.py).
    - Favor named exports for routes and utility functions.
    - Use the Receive an Object, Return an Object (RORO) pattern.
    
    Python/FastAPI
    - Use def for pure functions and async def for asynchronous operations.
    - Use type hints for all function signatures. Prefer Pydantic models over raw dictionaries for input validation.
    - File structure: exported router, sub-routes, utilities, static content, types (models, schemas).
    - Avoid unnecessary curly braces in conditional statements.
    - For single-line statements in conditionals, omit curly braces.
    - Use concise, one-line syntax for simple conditional statements (e.g., if condition: do_something()).
    
    Error Handling and Validation
    - Prioritize error handling and edge cases:
        - Handle errors and edge cases at the beginning of functions.
        - Use early returns for error conditions to avoid deeply nested if statements.
        - Place the happy path last in the function for improved readability.
        - Avoid unnecessary else statements; use the if-return pattern instead.
        - Use guard clauses to handle preconditions and invalid states early.
        - Implement proper error logging and user-friendly error messages.
        - Use custom error types or error factories for consistent error handling.
    
    Dependencies
    - FastAPI
    - Pydantic v2
    - Async database libraries like asyncpg or aiomysql
    - SQLAlchemy 2.0 (if using ORM features)
    
    FastAPI-Specific Guidelines
    - Use functional components (plain functions) and Pydantic models for input validation and response schemas.
    - Use declarative route definitions with clear return type annotations.
    - Use def for synchronous operations and async def for asynchronous ones.
    - Minimize @app.on_event("startup") and @app.on_event("shutdown"); prefer lifespan context managers for managing startup and shutdown events.
    - Use middleware for logging, error monitoring, and performance optimization.
    - Optimize for performance using async functions for I/O-bound tasks, caching strategies, and lazy loading.
    - Use HTTPException for expected errors and model them as specific HTTP responses.
    - Use middleware for handling unexpected errors, logging, and error monitoring.
    - Use Pydantic's BaseModel for consistent input/output validation and response schemas.
    
    Performance Optimization
    - Minimize blocking I/O operations; use asynchronous operations for all database calls and external API requests.
    - Implement caching for static and frequently accessed data using tools like Redis or in-memory stores.
    - Optimize data serialization and deserialization with Pydantic.
    - Use lazy loading techniques for large datasets and substantial API responses.
    
    Key Conventions
    1. Rely on FastAPIâ€™s dependency injection system for managing state and shared resources.
    2. Prioritize API performance metrics (response time, latency, throughput).
    3. Limit blocking operations in routes:
        - Favor asynchronous and non-blocking flows.
        - Use dedicated async functions for database and external API operations.
        - Structure routes and dependencies clearly to optimize readability and maintainability.

    Cursor Migration Safety Rules
        Never drop tables or columns in migrations unless explicitly requested and reviewed.
        All schema changes must use ALTER TABLE ... ADD COLUMN ... or similar additive DDL.
        Destructive migrations (DROP, TRUNCATE, etc.) are only allowed with explicit user approval and a backup.
        Always use IF NOT EXISTS for new columns, indexes, and constraints where possible.
        Test all migrations on a staging/dev database before applying to production.
        Migration files should be small, focused, and easy to review.
        Back up the database before running any migration that could affect existing data.
    
    Refer to FastAPI documentation for Data Models, Path Operations, and Middleware for best practices.
    
  
    